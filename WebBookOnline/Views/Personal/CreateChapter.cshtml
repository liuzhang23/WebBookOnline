

@model WebBookOnline.Models.Chapter
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Chapter</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.book_id, "book_id", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("book_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.book_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.chapter_number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.chapter_number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.chapter_number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.content, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.content, "", new { @class = "text-danger" })
                <script>
                    CKEDITOR.replace("content");

                    // Xử lý sự kiện paste trên ô nhập liệu
                    document.getElementById('content-input').addEventListener('paste', function (e) {
                        e.preventDefault();

                        // Lấy dữ liệu được paste
                        var pastedData = e.clipboardData.getData('text/plain');

                        // Chuyển các ký tự xuống dòng thành thẻ <br>
                        var contentWithLineBreaks = pastedData.replace(/[\r\n]+/g, '<br>');

                        // Thêm dữ liệu đã chuyển đổi vào ô nhập liệu
                        var contentInput = document.getElementById('content-input');
                        contentInput.innerHTML += contentWithLineBreaks;
                    });
                </script>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.created_at, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.created_at, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.created_at, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.view, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.view, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.view, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}